@page "/movies/filter"
@inject MoviesRepository repository
@inject GenresRepository genresRepository
@inject NavigationManager navManager
<h3>Movies filter</h3>

<div class="row g-3 align-items-center mb-3">
    <div class="col-sm-3">
        <input type="text" class="form-control" id="title" placeholder="Movie title"
               @bind-value="Title" @bind-value:event="oninput"
               @onkeypress="@((KeyboardEventArgs e) => TitleKeyPress(e))" />
    </div>
    <div class="col-sm-3">
        <select class="form-select" @bind="Genre">
            <option value="0">-- Select a genre --</option>
            @foreach(var item in genres) {
                <option value="@item.ID">@item.Name</option>
            }
           </select>
    </div>
    <div class="col-sm-6" style="display:flex;">
        <div class="form-check me-2">
            <input type="checkbox" class="form-chek-input" id="premieres" @bind="futurePremieres" />
            <label class="form-check-label" for="premieres">Future premieres</label>
        </div>
        <div class="form-check me-2">
            <input type="checkbox" class="form-chek-input" id="billboard" @bind="onBillboard" />
            <label class="form-check-label" for="billboard">On billboard</label>
        </div>
        <div class="form-check">
            <input type="checkbox" class="form-chek-input" id="mostVoted" @bind="mostVoted" />
            <label class="form-check-label" for="mostVoted">Most voted</label>
        </div>
    </div>

    <div class="col-12">
        <button type="button" class="btn btn-primary" @onclick="FilteredMovies">Filter</button>
        <button type="button" class="btn btn-danger" @onclick="Clean">Clean</button>
    </div>
</div>

<Pagination ActualPage="actualPage" TotalPages="totalPages" SelectedPage="SelectedPage" />

<MoviesList Movies="Movies"></MoviesList>
@code {
    [Parameter, SupplyParameterFromQuery] public string Title { get; set; } = "";  
    [Parameter, SupplyParameterFromQuery(Name = "genreid")] public int Genre { get; set; } = 0;                        
    private List<Genre> genres = new List<Genre>();
    [Parameter, SupplyParameterFromQuery] public bool futurePremieres { get; set; } = false;  
    [Parameter, SupplyParameterFromQuery] public bool onBillboard { get; set; } = false;  
    [Parameter, SupplyParameterFromQuery] public bool mostVoted { get; set; } = false;  
    private List<Movie>? Movies;
    Dictionary<string, string> queryStringDict = new Dictionary<string, string>();
    [Parameter, SupplyParameterFromQuery] public int actualPage { get; set; } = 1;
    private int totalPages { get; set; } = 1;  

    protected override async Task OnInitializedAsync() {
        //Movies = repository.GetMovies();
        if(actualPage == 0) actualPage = 1;  //Por las dudas de que en el queryString viniera un 0.
        await GetGenres();
        await PerformFilter();  
    }

    private async Task SelectedPage(int page) { 
        actualPage = page;
        await FilteredMovies();
    }

    private async Task GetGenres() {  
        genres = await genresRepository.Get();
    }

    private async Task TitleKeyPress(KeyboardEventArgs e)            
    {
        if(e.Key == "Enter") {
            await FilteredMovies();         
        }
    }

    private async Task FilteredMovies() {
        var queryString = GenerateQueryStrings();     
        navManager.NavigateTo($"/movies/filter?{queryString}");   
        await PerformFilter();   
    }

    private async Task PerformFilter() {    
        var searchParameters = GenerateSearchParameters();
        var paginatedResponse = await repository.Get(searchParameters);
        Movies = paginatedResponse.Records;
        totalPages = paginatedResponse.totalPages;
    }

    private SearchMoviesParametersDTO GenerateSearchParameters() {
        var response = new SearchMoviesParametersDTO();
        response.GenreID = Genre;
        response.Title = Title;
        response.Onbillboard = onBillboard;
        response.Releases = futurePremieres;
        response.MostVoted = mostVoted;
        response.Page = actualPage;
        return response;
    }

    private string GenerateQueryStrings() {   
        if(queryStringDict is null)
            queryStringDict = new Dictionary<string, string>();

        queryStringDict["genreid"] = Genre.ToString();
        queryStringDict["title"] = Title ?? string.Empty;
        queryStringDict["futurePremieres"] = futurePremieres.ToString();
        queryStringDict["onBillboard"] = onBillboard.ToString();
        queryStringDict["mostVoted"] = mostVoted.ToString();
        queryStringDict["page"] = actualPage.ToString();

        var defaultValues = new List<string>() { "false", "", "0" };

        return string.Join("&", queryStringDict.Where(x =>
                                !defaultValues.Contains(x.Value.ToLower()))
                                .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}")
                                .ToArray());
    }

    private async Task Clean() {                   
        Title = "";
        Genre = 0;
        futurePremieres = false;
        onBillboard = false;
        mostVoted = false;
        await FilteredMovies();

    }
}