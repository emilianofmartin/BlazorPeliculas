@page "/Login"
@inject NavigationManager navManager
@inject IRepository repository
@inject SweetAlertService swAl
@inject ILoginService loginService

<h3>Login</h3>
<EditForm Model="userInfo" OnValidSubmit="LoginUser">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>Email:</label>
        <div>
            <InputText class="form-control" @bind-Value="userInfo.Email" />
            <ValidationMessage For="@(() => userInfo.Email)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Password:</label>
        <div>
            <InputText type="password" class="form-control" @bind-Value="userInfo.Password" />
            <ValidationMessage For="@(() => userInfo.Password)" />
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    private UserInfoDTO userInfo = new UserInfoDTO();

    private async Task LoginUser() {
        var responseHTTP = await repository.Post<UserInfoDTO, UserTokenDTO>("api/accounts/login", userInfo);

        if(responseHTTP.Error) {
            var ErrMessage = await responseHTTP.GetErrMessage();
            await swAl.FireAsync("Error", ErrMessage, SweetAlertIcon.Error);
        }
        else {
            await loginService.Login(responseHTTP.Response!);
            navManager.NavigateTo("");
        }
    }
}
